import streamlit as st
import numpy as np
import cv2
import re
import tensorflow as tf
from streamlit_drawable_canvas import st_canvas

# Load the trained model (ensure compile=False to avoid optimizer errors)
model = tf.keras.models.load_model("tamil_model_classonly_v2.h5", compile=False)

# Tamil label map (cleaned and deduplicated from raw)
raw_text = """
ро╛,роЕ	роЖ	роЗ	роИ	роЙ	роК	роО	роП	роР	роТ	роУ	роФ роГ роХрпН		роХ	роХро┐	роХрпА	роХрпБ	роХрпВ роЪрпН	роЪ	роЪро┐	роЪрпА	роЪрпБ	роЪрпВ роЩрпН	роЩ	роЩро┐	роЩрпА	роЩрпБ	роЩрпВ роЮрпН		роЮ		роЮро┐	роЮрпА	роЮрпБ	роЮрпВ роЯрпН		роЯ		роЯро┐	роЯрпА	роЯрпБ	роЯрпВ рогрпН		рог		рогро┐	рогрпА	рогрпБ	рогрпВ родрпН	род		родро┐	родрпА	родрпБ	родрпВ роирпН		рои		роиро┐	роирпА	роирпБ	роирпВ рокрпН		рок		рокро┐	рокрпА	рокрпБ	рокрпВ роорпН		роо		рооро┐	роорпА	роорпБ	роорпВ	ропрпН	роп		ропро┐	ропрпА	ропрпБ	ропрпВ ро░рпН		ро░		ро░ро┐	ро░рпА	ро░рпБ	ро░рпВ ро▓рпН		ро▓		ро▓ро┐	ро▓рпА	ро▓рпБ	ро▓рпВ	ро│рпН		ро│		ро│ро┐	ро│рпА	ро│рпБ	ро│рпВ ро▒рпН		ро▒		ро▒ро┐	ро▒рпА	ро▒рпБ	ро▒рпВ ро╡рпН		ро╡		ро╡ро┐	ро╡рпА	ро╡рпБ	ро╡рпВ ро┤рпН		ро┤		ро┤ро┐	ро┤рпА	ро┤рпБ	ро┤рпВ ройрпН		рой		ройро┐	ройрпА	ройрпБ	ро╖ро┐	ро╖рпА	ро╖рпБ	ро╖рпВ роХрпНро╖	роХрпНро╖рпН	роХрпНро╖ро┐	роХрпНро╖рпА роЬро┐	роЬрпА	ро╣	ро╣рпН		ро╣ро┐	ро╣рпА	ро╣рпБ	ро╣рпВ		ро╕	ро╕рпН	ро╕ро┐	ро╕рпА	ро╕рпБ	ро╕рпВ ро╖ ро╖рпН ройрпВ ро╕рпНро░рпА shu роЬ	роЬрпН	ji jii srii  	рпЖ  рпЗ  рпИ
"""
cleaned = re.sub(r"[\t\s]+", ",", raw_text.strip())
char_list = [c for c in cleaned.split(",") if c != ""]
char_list = list(dict.fromkeys(char_list))
label_map = {i: char for i, char in enumerate(char_list)}

# Preprocess function
def preprocess_image(img):
    img = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)
    _, img = cv2.threshold(img, 250, 255, cv2.THRESH_BINARY_INV)
    img = cv2.resize(img, (64, 64))
    img = img / 255.0
    return img.reshape(1, 64, 64, 1)

# Predict function
def predict_single_character(img):
    processed = preprocess_image(img)
    pred = model.predict(processed)
    idx = np.argmax(pred)
    return label_map.get(idx, "?")

# UI
st.title("тЬНя╕П Tamil Handwritten Character Recognition (Single Character Only)")
st.write("Draw a single Tamil character below:")

canvas_result = st_canvas(
    fill_color="#FFFFFF",
    stroke_width=12,
    stroke_color="#000000",
    background_color="#FFFFFF",  # whiteboard
    height=300,
    width=300,
    drawing_mode="freedraw",
    key="canvas"
)

if canvas_result.image_data is not None:
    image = np.array(canvas_result.image_data).astype(np.uint8)
    st.image(image, caption="Your Drawing", use_column_width=False)

    if st.button("ЁЯФН Predict Character"):
        pred_char = predict_single_character(image)
        st.success(f"ЁЯФд Predicted Tamil Character: **{pred_char}**")
        st.balloons()